// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package pg

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Cmpg string

const (
	CmpgCivilian   Cmpg = "Civilian"
	CmpgMilitary   Cmpg = "Military"
	CmpgGovernment Cmpg = "Government"
	CmpgPolice     Cmpg = "Police"
	CmpgUnknown    Cmpg = "Unknown"
)

func (e *Cmpg) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Cmpg(s)
	case string:
		*e = Cmpg(s)
	default:
		return fmt.Errorf("unsupported scan type for Cmpg: %T", src)
	}
	return nil
}

type NullCmpg struct {
	Cmpg  Cmpg
	Valid bool // Valid is true if Cmpg is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCmpg) Scan(value interface{}) error {
	if value == nil {
		ns.Cmpg, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Cmpg.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCmpg) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Cmpg), nil
}

type Aircraft struct {
	IcaoHexCode          string
	Registration         pgtype.Text
	Manufacturer         pgtype.Text
	IcaoTypeCode         pgtype.Text
	AircraftType         pgtype.Text
	RegisteredOwners     pgtype.Text
	IcaoAirlineCode      pgtype.Text
	Cmpg                 Cmpg
	Planealertdbcategory pgtype.Text
	Planealertdbtags     []string
}
