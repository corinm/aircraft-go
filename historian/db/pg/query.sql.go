// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package pg

import (
	"context"
)

const getAircraft = `-- name: GetAircraft :one
SELECT icao_hex_code, registration, manufacturer, icao_type_code, aircraft_type, registered_owners, icao_airline_code, cmpg, planealertdbcategory, planealertdbtags FROM aircraft
WHERE icao_hex_code = $1 LIMIT 1
`

func (q *Queries) GetAircraft(ctx context.Context, icaoHexCode string) (Aircraft, error) {
	row := q.db.QueryRow(ctx, getAircraft, icaoHexCode)
	var i Aircraft
	err := row.Scan(
		&i.IcaoHexCode,
		&i.Registration,
		&i.Manufacturer,
		&i.IcaoTypeCode,
		&i.AircraftType,
		&i.RegisteredOwners,
		&i.IcaoAirlineCode,
		&i.Cmpg,
		&i.Planealertdbcategory,
		&i.Planealertdbtags,
	)
	return i, err
}

const listAircraft = `-- name: ListAircraft :many
SELECT icao_hex_code, registration, manufacturer, icao_type_code, aircraft_type, registered_owners, icao_airline_code, cmpg, planealertdbcategory, planealertdbtags FROM aircraft
ORDER BY icao_hex_code
`

func (q *Queries) ListAircraft(ctx context.Context) ([]Aircraft, error) {
	rows, err := q.db.Query(ctx, listAircraft)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Aircraft
	for rows.Next() {
		var i Aircraft
		if err := rows.Scan(
			&i.IcaoHexCode,
			&i.Registration,
			&i.Manufacturer,
			&i.IcaoTypeCode,
			&i.AircraftType,
			&i.RegisteredOwners,
			&i.IcaoAirlineCode,
			&i.Cmpg,
			&i.Planealertdbcategory,
			&i.Planealertdbtags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
