version: v2beta1
name: aircraft-historian

vars:
  IMAGE: aircraft-historian
  MIGRATIONS_IMAGE: aircraft-historian-goose

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  migrate-db:
    run: |-
      build_images --all -t $(git describe --always)
      kubectl run goose-migrate --restart=Never --image=${MIGRATIONS_IMAGE} --namespace=aircraft -- goose up

  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all        # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all     # 2. Ensure pull secrets
      create_deployments --all      # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev aircraft-historian  # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  aircraft-historian:
    image: ${IMAGE}
    dockerfile: ./Dockerfile
  aircraft-historian-goose:
    image: ${MIGRATIONS_IMAGE}
    dockerfile: ./goose.Dockerfile

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  aircraft-historian:
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        containers:
          - image: ${IMAGE}
        initContainers:
          # - name: goose-migrate-down
          #   image: ${MIGRATIONS_IMAGE}
          #   command: ["goose", "down-to", "0"]
          #   imageSelector: ${MIGRATIONS_IMAGE}
          - name: goose-migrate-up
            image: ${MIGRATIONS_IMAGE}
            command: ["goose", "up"]
            imageSelector: ${MIGRATIONS_IMAGE}

  # aircraft-goose-migrations:
  #   helm:
  #     chart:
  #       name: component-chart
  #       repo: https://charts.devspace.sh
  #     values:
  #       initContainers:
  #         - name: goose-migrate
  #           image: ${MIGRATIONS_IMAGE}
  #           command: ["goose", "up"]
  #           imageSelector: ${MIGRATIONS_IMAGE}
    # helm:
    #   chart:
    #     name: component-chart
    #     repo: https://charts.devspace.sh
    #   values:
    #     containers:
    #       - image: ${MIGRATIONS_IMAGE}

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  aircraft-historian:
    # Search for the container that runs this image
    imageSelector: ${IMAGE}
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: ghcr.io/loft-sh/devspace-containers/go:1.23-alpine
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./
    # Open a terminal and use the following command to start it
    terminal:
      command: ./devspace_start.sh
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: "2349"

# hooks:
# - name: Build Goose image
#   command: |
#     devspace build
#   events: ["before:deploy"]
# - name: Run Goose migrations
#   command: |
#     kubectl run goose-migrate --restart=Never --image=${MIGRATIONS_IMAGE} --namespace=aircraft -- goose up
#   container:
#     imageSelector: ${MIGRATIONS_IMAGE} # From goose.Dockerfile
#   events: ["before:deploy"]

# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  migrate-db:
    command: |-
      echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
      echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

# Define dependencies to other projects with a devspace.yaml
dependencies:
  aircraft-discoverer:
    path: ../discoverer
  aircraft-enricher:
    path: ../enricher
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
